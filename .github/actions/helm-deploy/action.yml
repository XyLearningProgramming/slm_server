name: 'Helm Deploy'
description: 'Deploy application using Helm'
inputs:
  image_tag:
    description: 'Docker image tag to deploy'
    required: true
  registry_repository:
    description: 'Docker registry repository'
    required: true
  kube_config_data:
    description: 'Base64 encoded kubeconfig'
    required: true
  helm_values_env:
    description: 'Environment variables for Helm values'
    required: false
    default: ''
  helm_values_persistence_hostpath:
    description: 'Persistence hostPath for Helm values'
    required: true
  helm_values_persistence_nodename:
    description: 'Persistence nodeName for Helm values'
    required: true
  namespace:
    description: 'Kubernetes namespace'
    required: true
    default: 'backend'
  github_token:
    description: 'GitHub token for Helm installation'
    required: true

runs:
  using: 'composite'
  steps:        
    - name: Install Helm
      uses: azure/setup-helm@v3
      with:
        version: 'latest'
      env:
        GITHUB_TOKEN: ${{ inputs.github_token }}
        
    - name: Set up Kubernetes config
      shell: bash
      run: |
        mkdir -p $HOME/.kube
        echo "${{ inputs.kube_config_data }}" > $HOME/.kube/config
        chmod 600 $HOME/.kube/config
    
    - name: Parse environment variables
      id: parse_env
      shell: bash
      run: |
        if [ -n "${{ inputs.helm_values_env }}" ]; then
          # Create temporary file to avoid exposing secrets in logs
          temp_file=$(mktemp)
          echo "${{ inputs.helm_values_env }}" | while IFS='=' read -r key value; do
            # Skip commented lines and empty lines
            if [[ "$key" =~ ^#.*$ ]] || [ -z "$key" ]; then
              continue
            fi
            if [ -n "$key" ] && [ -n "$value" ]; then
              echo "::add-mask::$value"
              echo "  $key: \"$value\"" >> "$temp_file"
            fi
          done
          
          # Output the parsed values without exposing them in logs
          echo "helm_env_values<<EOF" >> $GITHUB_OUTPUT
          cat "$temp_file" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          rm "$temp_file"
        else
          echo "helm_env_values=" >> $GITHUB_OUTPUT
        fi
         
    - name: Deploy with Helm
      shell: bash
      run: |
        # Create temporary values file with restricted permissions
        temp_values=$(mktemp)
        chmod 600 "$temp_values"
        
        cat > "$temp_values" << EOF
        image:
          repository: ${{ inputs.registry_repository }}
          tag: "${{ inputs.image_tag }}"
        
        persistence:
          hostPath: "${{ inputs.helm_values_persistence_hostpath }}"
          nodeName: "${{ inputs.helm_values_persistence_nodename }}"
        
        env:
        ${{ steps.parse_env.outputs.helm_env_values }}
        EOF
        
        # Deploy using Helm (values file won't be logged due to file redirection)
        helm upgrade --install slm-server ./deploy/helm \
          --namespace ${{ inputs.namespace }} \
          --create-namespace \
          --values "$temp_values" \
          --wait \
          --timeout 10m
        
        # Clean up temporary file
        rm "$temp_values"

    - name: Verify deployment
      shell: bash
      run: |
        kubectl rollout status deployment/slm-server -n ${{ inputs.namespace }} --timeout=300s
        kubectl get pods -n ${{ inputs.namespace }} -l app.kubernetes.io/name=slm-server
