name: CD Pipeline

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment'
        required: true
        default: 'prod'
        type: choice
        options:
          - prod
  workflow_run:
    workflows: ["CI Pipeline"]
    types:
      - completed
    branches:
      - main

env:
  REGISTRY: docker.io

jobs:
  deploy:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch' }}
    environment: prod
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to DockerHub
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ secrets.REGISTRY_USERNAME }}
        password: ${{ secrets.REGISTRY_ACCESS_TOKEN }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ secrets.REGISTRY_REPOSITORY }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
          
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: |
          type=gha
          type=registry,ref=${{ secrets.REGISTRY_REPOSITORY }}:buildcache
        cache-to: |
          type=gha,mode=max
          type=registry,ref=${{ secrets.REGISTRY_REPOSITORY }}:buildcache,mode=max
        
    - name: Set up Kubernetes config
      run: |
        mkdir -p $HOME/.kube
        echo "${{ secrets.KUBE_CONFIG_DATA }}" | base64 -d > $HOME/.kube/config
        chmod 600 $HOME/.kube/config
        
    - name: Install Helm
      uses: azure/setup-helm@v3
      with:
        version: 'latest'
        
    - name: Parse environment variables
      id: parse_env
      run: |
        if [ -n "${{ secrets.HELM_VALUES_ENV }}" ]; then
          echo "helm_env_values<<EOF" >> $GITHUB_OUTPUT
          echo "${{ secrets.HELM_VALUES_ENV }}" | while IFS='=' read -r key value; do
            # Skip commented lines and empty lines
            if [[ "$key" =~ ^#.*$ ]] || [ -z "$key" ]; then
              continue
            fi
            if [ -n "$key" ] && [ -n "$value" ]; then
              echo "  $key: \"$value\""
            fi
          done >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
        else
          echo "helm_env_values=" >> $GITHUB_OUTPUT
        fi
        
    - name: Deploy with Helm
      run: |
        # Get the image tag from the metadata step
        IMAGE_TAG=$(echo '${{ steps.meta.outputs.tags }}' | head -n1 | cut -d':' -f2)
        
        # Create temporary values file
        cat > /tmp/override-values.yaml << EOF
        image:
          repository: ${{ secrets.REGISTRY_REPOSITORY }}
          tag: "$IMAGE_TAG"
        
        persistence:
          hostPath: "${{ secrets.HELM_VALUES_PERSISTENCE_HOSTPATH }}"
          nodeName: "${{ secrets.HELM_VALUES_PERSISTENCE_NODENAME }}"
        
        env:
        ${{ steps.parse_env.outputs.helm_env_values }}
        EOF
        
        # Deploy using Helm
        helm upgrade --install slm-server ./deploy/helm \
          --namespace default \
          --create-namespace \
          --values /tmp/override-values.yaml \
          --wait \
          --timeout 10m
          
    - name: Verify deployment
      run: |
        kubectl rollout status deployment/slm-server -n default --timeout=300s
        kubectl get pods -n default -l app.kubernetes.io/name=slm-server